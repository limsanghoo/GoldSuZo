<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="BoardMapper">
	
	<resultMap type="board" id="boardSelectMap">
		<result property="boardNo"	column="board_no"	jdbcType="VARCHAR"/>
		<result property="user.userNo"	column="user_no"	jdbcType="VARCHAR"/>
		<result property="user.profile"	column="profile"	jdbcType="VARCHAR"/>
		<result property="user.userNickname" column="user_nickname"	jdbcType="VARCHAR"/>
		<result	property="boardDetailText"	column="board_detail_text"	jdbcType="VARCHAR"/>
		<result	property="hashTag"	column="hash_tag"	jdbcType="VARCHAR"/>
		<result	property="userTheme"	column="user_theme"	jdbcType="VARCHAR"/>
		<result	property="boardRegDate"	column="board_reg_date"	jdbcType="DATE"/>
		<result	property="boardStatus"	column="board_status"	jdbcType="VARCHAR"/>
		<result	property="photo1"	column="photo1"	jdbcType="VARCHAR"/>
		<result	property="photo2"	column="photo2"	jdbcType="VARCHAR"/>
		<result	property="photo3"	column="photo3"	jdbcType="VARCHAR"/>
		<result	property="coord"	column="coord"	jdbcType="VARCHAR"/>
		<result	property="address"	column="address"	jdbcType="VARCHAR"/>
	</resultMap>
	
	<resultMap type="comment" id="commentSelectMap">
		<result property="commentNo"	column="comment_no"	jdbcType="VARCHAR"/>
		<result property="board.boardNo"	column="board_no"	jdbcType="VARCHAR"/>
		<result property="user.userNo"	column="user_no"	jdbcType="VARCHAR"/>
		<result property="commentDetailText"	column="comment_detail_text"	jdbcType="VARCHAR"/>
		<result property="commentRegDate"	column="comment_reg_date"	jdbcType="DATE"/>
	</resultMap>
	
	 
	 <insert 	id="addBoard"	parameterType="board" >
	 	INSERT
		INTO board(board_no, user_no, board_detail_text, hash_tag, user_theme, board_reg_date, board_status, photo1, photo2, photo3, coord, address)
		VALUES('BD'||seq_bd.nextval,#{user.userNo},#{boardDetailText},#{hashTag:VARCHAR},#{userTheme},sysdate,#{boardStatus},#{photo1:VARCHAR},#{photo2:VARCHAR},#{photo3:VARCHAR},#{coord:VARCHAR},#{address:VARCHAR})
	 </insert>
	 
	 
	<insert id="addComment" parameterType="comment">
	 	INSERT
	 	INTO comments(comment_no, board_no, user_no, comment_detail_text, comment_reg_date)
	 	VALUES('CM'||seq_cm.nextval,#{board.boardNo},#{user.userNo},#{commentDetailText},sysdate)
	 </insert>
	 
	 
	<select id="listBoard" parameterType="com.zagle.service.domain.SearchBoard" resultMap="boardSelectMap">
		SELECT DISTINCT u.user_no, u.profile, u.user_nickname, b.board_no, b.photo1, b.photo2, b.photo3, b.board_detail_text, b.hash_tag, b.user_theme, b.coord, b.board_reg_date, b.board_status, b.address
		FROM users u, board b
		WHERE u.user_no=b.user_no
		<if test="local!=null">
		AND b.address LIKE '%'||#{local}||'%'
		</if>
		<if test="searchKeyword!=null">
		AND b.hash_tag LIKE '%'||#{searchKeyword}||'%'
		</if>
		ORDER BY b.board_reg_date DESC
	 </select>
	 
	 <select id="listComment" parameterType="string" resultMap="commentSelectMap">
	 	SELECT * 
	 	FROM comments
	 	WHERE board_no=#{board.boardNo}
	 	ORDER BY comment_reg_date
	 </select>
	 
	 
	<select id="getBoard" parameterType="int"	resultMap="boardSelectMap">
	 	SELECT *
	 	FROM board
	 	WHERE board_no=#{value}
	</select>


	<update id="updateBoard" parameterType="board">
		UPDATE board
		<set>
			board_detail_text=#{boardDetailText},
			hash_tag=#{hashTag:VARCHAR},
			user_theme=#{userTheme},
			board_status=#{boardStatus},
			photo1=#{photo1:VARCHAR},
			photo2=#{photo2:VARCHAR},
			photo3=#{photo3:VARCHAR},
			coord=#{coord:VARCHAR},
			address=#{address:VARCHAR}		
		</set>
		WHERE board_no=#{boardNo}
	</update>
	
	
	<update id="deleteBoard" parameterType="board">
		UPDATE board
		<set>
			board_status=#{boardStatus}
		</set>
		WHERE board_no=#{boardNo}
	</update>
	
	<select id="getMapList" parameterType="string" resultMap="boardSelectMap">
		select * from board where address like '${searchKeyword}%' and board_status=1
	</select>
	
<!-- ////////////////////////////////////// -->	
	
	
	 <!-- SQL : INSERT -->
   <!-- <insert id="addReComment" parameterType="com.destiny.service.domain.Comment">
       INSERT
      INTO comments ( comment_no, community_no, comment_writer_id, comment_detail, comment_write_date, comment_target_no, comment_view_condition ) 
      VALUES ( seq_comment_no.nextval, #{commentComuNo}, #{commentWriterId}, #{commentDetail}, SYSDATE, #{targetNo}, #{viewCondition})
    </insert> -->
   
   <!-- SQL : INSERT -->
   <!-- <insert id="addComment" parameterType="comment">
       INSERT
      INTO comments( comment_no, community_no, comment_writer_id, comment_detail, comment_write_date, comment_target_no, comment_view_condition ) 
      VALUES( seq_comment_no.nextval, #{commentComuNo}, #{commentWriterId}, #{commentDetail}, SYSDATE, seq_comment_no.currval, #{viewCondition} )
   </insert> -->
    
    <!-- SQL : SELECT ONE -->
    <!-- <select id="getComment" parameterType="int" resultMap="commentSelectMap">
      SELECT
      comment_no, community_no, comment_writer_id, comment_detail, comment_write_date, comment_target_no, comment_view_condition
      FROM comments
      WHERE comment_no = #{value}
    </select> -->
    
    <!-- SQL : UPDATE -->
   <!--  <update id="updateComment"   parameterType="com.destiny.service.domain.Comment" >
         UPDATE comments
         <set>
            comment_detail = #{commentDetail}
         </set>
         WHERE comment_no = #{commentNo}
    </update> -->
    
    <!-- SQL : VIEW_CONDITION UPDATE -->
    <!-- <update id="updateViewCondition"   parameterType="com.destiny.service.domain.Comment" >
         UPDATE comments
         <set>
            comment_view_condition = 'DEL'
         </set>
         WHERE comment_no = #{commentNo}
    </update> -->
   
   <!-- SQL : SELECT LIST -->
   <!-- <select  id="getCommentList"  parameterType="map"   resultMap="commentSelectMap">
        SELECT comment_no , community_no , comment_writer_id , comment_detail , comment_write_date, comment_target_no, comment_view_condition
      FROM comments
      WHERE community_no = #{commentComuNo} and comment_view_condition = 'DEF' and parent_reply_no is NULL
      ORDER BY comment_target_no, comment_no 
        SELECT *
        FROM (   SELECT inner_table.* , ROWNUM AS row_seq
                    FROM      (   SELECT comment_no , community_no , comment_writer_id , comment_detail , comment_write_date, comment_target_no, comment_view_condition
                                 FROM comments
                                 WHERE community_no = #{commentComuNo} and parent_reply_no is NULL
                                 ORDER BY comment_target_no, comment_no
                               ) inner_table
                  WHERE ROWNUM &lt;= #{search.endRowNum} )
      WHERE row_seq BETWEEN #{search.startRowNum} AND #{search.endRowNum} 
    </select> -->
    
    <!-- SQL : SELECT ROW Count -->    
    <!-- <select  id="getTotalCount"  parameterType="String"    resultType="int">
        SELECT COUNT(*)
        FROM(   SELECT comment_no , community_no , comment_writer_id , comment_detail , comment_write_date, comment_target_no, comment_view_condition
                  FROM comments
                  WHERE community_no = #{value} 
                ) countTable                  
    </select> -->
	
	 
</mapper>